Description: |
  AWS Cloudformation template for TrueCall ansible test
  1 control, can extend to more
  Dependecies:
    1. S3 bucket with pem file, packages, applications
    2. IAM role for S3 access
    3. VPC to build EC2
    4. Building of control server depends on successful built of slave servers
  Functions:
    1. build 1 control server with all application dependency packages 
    2. On control, install ansible, git, copy applicaiton packages from private s3 bucket
    3. Use pem file from private s3 bucket for passwordless connections between all servers. change to rsa pair for enhanced security later.
    4. Update contorl /etc/hosts with slave IPs
    5. Need to update security group to allow laptop ip access
    6. Use AWS cfn-init for cloudformation metadata control
    7. Control server building depends on slave servers. Automatically roll back if control built fails.
    8. Output server public IPs in cloudformation IP

AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    Default: MyEC2KeyPair
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  RoleName:
    Description: Name of IAM Role for EC2 instances
    Type: "String"
    Default: "S3-Admin-Access"
    ConstraintDescription: must be the name of an existing IAM Role.
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Default: vpc-0fa16d5fa89c52bd9
    Description: VpcId of your existing Virtual Private Cloud (VPC)
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t1.micro, t2.nano, t2.micro, t2.small, t2.medium, t2.large, m1.small,
      m1.medium, m1.large, m1.xlarge, m2.xlarge, m2.2xlarge, m2.4xlarge, m3.medium,
      m3.large, m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge,
      m4.10xlarge, c1.medium, c1.xlarge, c3.large, c3.xlarge, c3.2xlarge, c3.4xlarge,
      c3.8xlarge, c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, g2.2xlarge,
      g2.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge, r3.8xlarge, i2.xlarge,
      i2.2xlarge, i2.4xlarge, i2.8xlarge, d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge,
      hi1.4xlarge, hs1.8xlarge, cr1.8xlarge, cc2.8xlarge, cg1.4xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  #SecurityGroup:
  #  Description: Security group used for ansible test
  #  Type: String
  #  Default: sg-066f4f3e606bef70c
  #  ConstraintDescription: must be existing security group
  AnsiblePackage:
    Description: ansible package name in s3://ansible-test-kaiyuan bucket
    Type: String
    Default: ansible_truecall_v17.3_02Nov18.tar.gz
    ConstraintDescription: Available ansible package ,
  TrueCallPackage:
    Description: TrueCall package name in s3://ansible-test-kaiyuan bucket
    Type: String
    Default: TrueCall-Server-17.3.0.16-0-gaa28f3b-el7-x86_64.rpm
    ConstraintDescription: Available TrueCall package,
  GsrPackage:
    Description: Gsr package name in s3://ansible-test-kaiyuan bucket
    Type: String
    Default: GSRservices-V7.17.3.0.3_PR_CP23-0_el7.x86_64.rpm
    ConstraintDescription: Available Gsr package file.
  ConfigAnsibleOutputConf:
    Description: Ansible Configuration files in s3://ansible-test-kaiyuan bucket. Generated by config_ansible.py. Available options are 1 server config_ansible_output_one_server.zip, and 3 servers config_ansible_output_aws.zip
    Type: String
    Default: config_ansible_output_one_server.zip
    ConstraintDescription: Available Ansible Configuration files.
  ConfigAnsiblePkg:
    Description: Software package of config_ansible.py in s3://ansible-test-kaiyuan bucket
    Type: String
    Default: config_ansible.zip
    ConstraintDescription: Available Ansible Configuration file pkg.
  TruecallSiteBackup:
    Description: Site backups of TrueCall servers in s3://ansible-test-kaiyuan bucket
    Type: String
    Default: Truecall_backup_20181119.zip
    ConstraintDescription: Available TrueCall site backup demos. 

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "EC2 Configuration"
        Parameters:
          - SSHLocation
          - VpcId
          - InstanceType
      - Label:
          default: "Connection Configuration"
        Parameters:
          - KeyName
          - RoleName      
      - Label:
          default: "Ansible Configuration"
        Parameters:
          - AnsiblePackage
          - TrueCallPackage
          - GsrPackage
          - ConfigAnsibleOutputConf
          - ConfigAnsiblePkg
          - TruecallSiteBackup

Mappings:
  AWSInstanceType2Arch:
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
  AWSRegionArch2AMI:
    ap-southeast-2:
      HVM64: ami-08589eca6dcc9b39c

Resources:
  AnsibleTestSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: 
        Ref: VpcId
      GroupDescription: Security group for Ansible Test Servers
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 
            Ref: SSHLocation
          FromPort: '22'
          ToPort: '22'
          Description: ssh
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: '80'
          ToPort: '80'
          Description: http
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: '8443'
          ToPort: '8443'
          Description: https
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: '9891'
          ToPort: '9891'
          Description: TrueCall
  AnsibleTestSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: 
        Ref: AnsibleTestSecurityGroup
      IpProtocol: tcp
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId:
        Ref: AnsibleTestSecurityGroup

  ControlHost:
    Description: "Ansible control host"
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: 
        Ref: 'InstanceType'
      IamInstanceProfile: 
        Ref: 'RoleName'
      SecurityGroupIds: [Ref: 'AnsibleTestSecurityGroup']
      KeyName: 
        Ref: 'KeyName'
      ImageId: 
        Fn::FindInMap: 
          - AWSRegionArch2AMI
          - Ref: 'AWS::Region'
          - Fn::FindInMap: [AWSInstanceType2Arch, Ref: 'InstanceType', Arch]
      Tags:
        -
          Key: Type
          Value: Control
      UserData: 
        "Fn::Base64":
          Fn::Sub: |
            #!/bin/bash -xe

            # Get the latest CloudFormation package
            yum update -y aws-cfn-bootstrap
            # Start cfn-init
            /opt/aws/bin/cfn-init -s ${AWS::StackId} -r ControlHost --region ${AWS::Region} || error_exit 'Failed to run cfn-init'
            # Start up the cfn-hup daemon to listen for changes to the EC2 instance metadata
            /opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'
            

            # Install truecall dependencies
            yum groupinstall -y @core @debugging @development @hardware-monitoring @large-systems @performance @postgresql @security-tools @web-server @hardware-monitoring @large-systems @system-admin-tools @system-management @system-management-snmp --setopt=group_package_types=mandatory,default,optional
            yum install -y chrony python-psycopg2 httpd-tools libICE libSM libicu libyaml mailcap python-markupsafe perl-Archive-Zip protobuf libunwind sysfsutils lynx base install htop iftop ncurses-compat-libs postgresql postgresql-server mod_ssl m2crypto

            # install git, ansible, pandas
            yum -y install git python-pip tree
            amazon-linux-extras install ansible2 -y
            pip install numpy pandas xlrd xlsxwriter
            yum update -y
            cd /opt/ansible
            git init


            # Install RFB dependencies
            yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            yum install -y armadillo arpack atlas blas dbus git gzip libcap-ng libunwind lzma mcelog mlpack net-snmp-libs perl sshpass tbb zlib hdf5 lapack libgfortran libgnome-keyring libicu libquadmath
            wget http://mirror.centos.org/centos/7/extras/x86_64/Packages/libssh-0.7.1-3.el7.x86_64.rpm; yum localinstall -y libssh-0.7.1-3.el7.x86_64.rpm


            # download RFB related pkgs
            for rfb_pkg in Netscout-FlowBroker-V7.17.3.0.3-0_rhel7.x86_64.rpm Netscout-FlowBroker-V7.17.4.0.3-1_cos731611el7.x86_64.rpm{,.md5} {xhhny82708_config.zip,JKT-RFB-01_config.tgz,boost_rpms.tgz} RFB_NE_TABLE_RRC_20181207.csv; do
              aws s3 cp s3://ansible-test-kaiyuan/$rfb_pkg /opt
            done
            #rpm -qa | grep boost | tr -s '\n' ' '| xargs rpm -e
            tar xvf /opt/boost_rpms.tgz && yum -y localinstall boost*.rpm && rm -rf boost*.rpm


            # All done so signal success
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource ControlHost --region ${AWS::Region}
            
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Metadata:
      Comment: "1. Config passwordless connection to slaves. 2. Fetch packages. 3. Install ansible. 4. Install git. 5. YUM update."
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: 
            Ref: RoleName
          buckets: 
            - ansible-test-kaiyuan
      AWS::CloudFormation::Init:
        config:
          sources:
            "/opt": 
              Fn::Join: [ '/', [ "https://ansible-test-kaiyuan.s3.amazonaws.com", Ref: AnsiblePackage ]]
            "/opt/ansible": 
              Fn::Join: [ '/', [ "https://ansible-test-kaiyuan.s3.amazonaws.com", Ref: ConfigAnsibleOutputConf ]]
            "/opt/config_ansible": 
              Fn::Join: [ '/', [ "https://ansible-test-kaiyuan.s3.amazonaws.com", Ref: ConfigAnsiblePkg ]]
            "/opt/config_ansible/Truecall_backup": 
              Fn::Join: [ '/', [ "https://ansible-test-kaiyuan.s3.amazonaws.com", Ref: TruecallSiteBackup ]]
            "/opt/tc3/scripts": 
              Fn::Join: [ '/', [ "https://ansible-test-kaiyuan.s3.amazonaws.com", "tc_scripts.tar.gz" ]]
            
          files:
            "/etc/cfn/cfn-hup.conf":
              content: 
                Fn::Sub: |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: 
                Fn::Sub: |
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.ControlHost.Metadata.AWS::CloudFormation::Init
                  action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ControlHost --region ${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
            "/etc/hosts":
              content: 
                Fn::Sub: |
                  127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 control
                  ::1         localhost6 localhost6.localdomain6
                  control
              mode: "000755"
              owner: "root"
              group: "root"
              #authentication: "S3AccessCreds"
            "/home/ec2-user/.ssh/config":
              content: |
                Host control
                IdentityFile ~/.ssh/MyEC2KeyPair.pem
              mode: "000400"
              owner: "ec2-user"
              group: "ec2-user"
            "/home/ec2-user/.ssh/MyEC2KeyPair.pem":
              source: "https://ansible-test-kaiyuan.s3.amazonaws.com/MyEC2KeyPair.pem"
              mode: "000400"
              owner: "ec2-user"
              group: "ec2-user"
            "/opt/scripts/download_ansible_packages.sh":
              content: 
                Fn::Sub: |
                  aws s3 cp s3://ansible-test-kaiyuan/${TrueCallPackage} /opt/ansible/roles/tc_install/files
                  aws s3 cp s3://ansible-test-kaiyuan/${GsrPackage} /opt/ansible/roles/tc_install/files
                  #sed -i "s?^truecall_rpm:?truecall_rpm: ${TrueCallPackage}?; s?gsrsvcs_rpm:?gsrsvcs_rpm: ${GsrPackage}?g" /opt/ansible/roles/tc_install/vars/main.yml
                  ####### TEST FOR test.ini.j2 JINJA2 TEMPLATE
                  for f in config.ini_vo{,.logic}.j2; do
                    #aws s3 cp s3://ansible-test-kaiyuan/$f /opt/ansible/roles/tc_install/templates
                    chmod 777 /opt/ansible/roles/tc_install/templates/$f
                    cp -p /opt/ansible/roles/tc_install/templates/`echo $f | sed 's/_vo//'` /opt/ansible/roles/tc_install/templates/`echo $f | sed 's/_vo//'`.back
                    mv /opt/ansible/roles/tc_install/templates/$f /opt/ansible/roles/tc_install/templates/`echo $f | sed 's/_vo//'`
                  done
                  sed -i "s/config.ini_vo.logic.j2/config.ini.logic.j2/g" /opt/ansible/roles/tc_install/templates/config.ini.j2
                  # task for test.ini.j2 test
                  #mv /opt/ansible/roles/tc_install/tasks/main.yml /opt/ansible/roles/tc_install/tasks/main_org.yml
                  #aws s3 cp s3://ansible-test-kaiyuan/test_main.yml /opt/ansible/roles/tc_install/tasks/main.yml
                  mkdir /opt/ansible/group_vars/all/
                  #aws s3 cp s3://ansible-test-kaiyuan/default.yml /opt/ansible/group_vars/all/
                  #awk 'NR>1{print}' /opt/ansible/default.yml >> /opt/ansible/group_vars/TrueCall.yml
                  #for f in {/opt/ansible/roles/tc_install/tasks/main.yml}; do
                  chmod 777 /opt/ansible/roles/tc_install/tasks/main.yml
                  #done
                  chmod -R 777 /opt/config_ansible

                  cat > /opt/ansible/roles/tc_install/files/tc_config_cleanup.sh << EOF
                  #!/bin/bash

                  # configure cylinderd server
                  config_file=/opt/tc3/etc/config.ini;for i in `egrep "LSR-server_COMMON_LTE|cylinderd_COMMON_LTE" $config_file| awk -F/ '{print $1}'`; do sed -i "/$i\/args/s/$/|--disk-space-critical-threshold=2/g" $config_file; done
                  echo "alias tcdir='cd /var/lib/truecall/'
                  alias tclog='cd /var/lib/truecall/log/'
                  alias tcconfig='cd /opt/tc3/etc/'
                  alias tcscript='cd /opt/tc3/scripts'" >> ~root/.bashrc
                  EOF

                  # create TC related dirs, and download TC related pkgs
                  mkdir -p /var/lib/truecall/COMMON_LTE/csv/190224/05 /opt/ansible/roles/tc_install/files /opt/tc3/scripts/
                  chmod -R 777 /opt/tc3/scripts/
                  for f in handset_private.pem handset_public.pem handset_db.txt COMMON_LTE_201811140400_MELBOURNE_new.txt; do
                    touch /opt/ansible/roles/tc_install/files/$f
                  done

                  aws s3 cp s3://ansible-test-kaiyuan/2019022405.1550959240146450.csv.gz /var/lib/truecall/COMMON_LTE/csv/190224/05

              mode: "000755"
              owner: "root"
              group: "root"
            #"/opt/ansible/roles/tc_install/files/tc_config_cleanup.sh":
            #  content: Fn::Sub: |
            #    #!/bin/bash

            #    # configure cylinderd server
            #    config_file=/opt/tc3/etc/config.ini;for i in `egrep "LSR-server_COMMON_LTE|cylinderd_COMMON_LTE" $config_file| awk -F/ '{print $1}'`; do sed -i "/$i\/args/s/$/|--disk-space-critical-threshold=2/g" $config_file; done
            #    echo "alias tcdir='cd /var/lib/truecall/'
            #    alias tclog='cd /var/lib/truecall/log/'
            #    alias tcconfig='cd /opt/tc3/etc/'
            #    alias tcscript='cd /opt/tc3/scripts'" >> ~root/.bashrc
            #  mode: "000755"
            #  owner: "root"
            #  group: "root"
            #"/opt/ansible/ansible.cfg":
            #  source: "https://ansible-test-kaiyuan.s3.amazonaws.com/ansible.cfg"
            #  mode: "000755"
            #  owner: "ec2-user"
            #  group: "ec2-user"
            #"/opt/ansible/dev":
            #  source: "https://ansible-test-kaiyuan.s3.amazonaws.com/dev"
            #  mode: "000755"
            #  owner: "ec2-user"
            #  group: "ec2-user"

            "/opt/scripts/ansible_commands.sh":
              content: 
                Fn::Sub: |
                  #!/bin/bash 

                  ansible all -a "sudo systemctl start truecall-server"
                  ansible all -m shell -a 'ps -ef | grep tc3'
                  ansible all -m service -a "name=truecall-server enabled=yes state=started"
                  ansible all -m shell -a "systemctl status truecall-server"
                  ansible all -m yum -a "name=truecall-server state=absent"
                  ansible --list-hosts all
                  ansible-playbook --syntax-check tc_install.yml
                  ansible-playbook --check tc_install.yml
                  ansible-playbook -i production_test tc_install.yml -K --tags="stage,install" -vvv
                  ansible-playbook -i production_test tc_install.yml -K --tags="reconfig" -vvv
                  ansible control -m setup
                  ansible -m setup -a 'gather_subset=network' control
                  ansible -m debug -a 'var=hostvars["control"]' control
                  ansible -m debug -a 'var=hostvars["slave_1"]' control
                  ansible -m setup -a "filter='ansible_all_ipv4_addresses'" control
                  ansible-playbook -i production tc_report.yml -K --limits, --tags="lte" -vvv
                  ansible-playbook -i production tc_upgrade.yml -K --tags="stage,upgrade" --skip-tags="skipgsr" -vvv

                  yum remove truecall-server -y

                  # configure cylinderd server
                  config_file=/opt/tc3/etc/config.ini;for i in `egrep "LSR-server_COMMON_LTE|cylinderd_COMMON_LTE" $config_file| awk -F/ '{print $1}'`; do sed -i "/$i\/args/s/$/|--disk-space-critical-threshold=2/g" $config_file; done
                  rm -f /opt/ansible/roles/tc_install/files/TrueCall-Server-17.3.0.16-0-gaa28f3b-el7-x86_64.rpm

                  ansible-config
                  ansible-doc
                  ansible -m yum -s -a "name=ntpd state=installed" -o
                  ansible all -m user -s/-b -a "name=user2 state=absernt"

              mode: "000755"
              owner: "root"
              group: "root"
            
            "/opt/scripts/run_configure_ansible.sh":
              content: 
                Fn::Sub: |
                  #!/bin/bash

                  # config_ansible.py
                  # generate configs
                  python  config_ansible.py -G -s config_ansible_input/truecall_server_info_template.xlsx
                  # update truecall_server_info.xlsx
                  python configure_ansible.py -U
                  # update config template from backup
                  python config_ansible.py -P --backup-data-dir Truecall_backup_20181119
              mode: "000755"
              owner: "root"
              group: "root"
            "/opt/scripts/truecall_install.sh":
              content: 
                Fn::Sub: |
                  #!/bin/bash

                  # Install truecall dependencies
                  #yum groupinstall -y @core @debugging @development @hardware-monitoring @large-systems @performance @postgresql @security-tools @web-server @hardware-monitoring @large-systems @system-admin-tools @system-management @system-management-snmp --setopt=group_package_types=mandatory,default,optional
                  #yum install -y chrony python-psycopg2 httpd-tools libICE libSM libicu libyaml mailcap python-markupsafe perl-Archive-Zip protobuf libunwind sysfsutils lynx base install htop iftop ncurses-compat-libs postgresql postgresql-server mod_ssl

                  # truecall fresh install
                  tc_pkg=/opt/ansible/roles/tc_install/files/TrueCall-Server-17.3.0.16-0-gaa28f3b-el7-x86_64.rpm; rpm -ivh $tc_pkg && rm -f $tc_pkg 
                  gsr_pkg=/opt/ansible/roles/tc_install/files/GSRservices-V7.17.3.0.3_PR_CP23-0_el7.x86_64.rpm; rpm -ivh $gsr_pkg && rm -f $gsr_pkg
                  wait 10
                  mv /opt/tc3/etc/config.ini /opt/tc3/etc/config.ini.org; cp -f /opt/tc3/scripts/one_server_config.ini /opt/tc3/etc/config.ini
                  cp -f /opt/tc3/scripts/lte_local_settings.rb /opt/tc3/share/WebClient5/config/local_settings.rb
                  /opt/tc3/share/WebClient5/conf-database.sh
                  /opt/tc3/share/WebClient5/conf-webclient.sh
                  rm -rf /opt/*.{tar.gz,rpm}
                  systemctl start truecall-server
                  systemctl enable truecall-server

                  # configure http security
                  grep -q '^TraceEnable Off' /etc/httpd/conf/httpd.conf || echo "TraceEnable Off " >> /etc/httpd/conf/httpd.conf
                  grep -q "RewriteCond %{REQUEST_METHOD} \^TRACE" /etc/httpd/conf.d/truecall.conf || sed -i '/DocumentRoot/a\ RewriteEngine On\n RewriteCond %{REQUEST_METHOD} ^TRACE\n RewriteRule .* - [F]' /etc/httpd/conf.d/truecall.conf
                  systemctl reload httpd

                  # configure crontab
                  cp /opt/tc3/etc/crontab.pkg /opt/tc3/etc/crontab 

                  # config ne table and handset table
                  su - postgres -c "pg_restore --dbname=tcadmin_production /opt/tc3/scripts/handset_database_setups_table_dump.sql"
                  cp -p /opt/tc3/scripts/handset_table.txt /var/lib/truecall/handset_database/uploads/tac_`date +%Y%m%d%H%M%S%3N`.txt
                  cp -p /opt/tc3/scripts/VIC_TAS_COMMON_LTE_201806220033.txt /var/lib/truecall/ne_tables

              mode: "000755"
              owner: "root"
              group: "root"
            "/opt/scripts/truecall_debug.sh":   
              content: 
                Fn::Sub: |
                  #!/bin/bash

                  # aftwerwork of truecall installation
                  # config ne table and handset table
                  su - postgres -c "pg_restore --dbname=tcadmin_production /opt/tc3/scripts/handset_database_setups_table_dump.sql"
                  config_file=/opt/tc3/etc/config.ini;for i in `egrep "LSR-server_COMMON_LTE|cylinderd_COMMON_LTE" $config_file| awk -F/ '{print $1}'`; do sed -i "/$i\/args/s/$/|--disk-space-critical-threshold=2/g" $config_file; done
                  rm -f /opt/ansible/roles/tc_install/files/TrueCall-Server-17.3.0.16-0-gaa28f3b-el7-x86_64.rpm
                  cp /opt/ansible/*.pem /opt/tc3/etc/
                  systemctl restart truecall-server
                  chown daemon:daemon  /opt/tc3/scripts/VIC_TAS_COMMON_LTE_201806220033.txt; cp -p /opt/tc3/scripts/VIC_TAS_COMMON_LTE_201806220033.txt /var/lib/truecall/ne_tables
                  unzip /opt/tc3/scripts/handset_table.zip -d /opt/tc3/scripts/; chmod 777 /opt/tc3/scripts/handset_table.txt; cp -p /opt/tc3/scripts/handset_table.txt /var/lib/truecall/handset_database/uploads/tac_`date +%Y%m%d%H%M%S%3N`.txt

                  # TCSTCP Server debugging
                  # os debugging, covered by introduction
                  top
                  free -h
                  less /var/log/messages
                  dmesg
                  journalctl -k
                  mount | grep "/var/lib/truecall"
                  df –hTP | grep "/var/lib/truecall"
                  ls /var/lib/truecall
                  cat /etc/sysconfig/network-scripts/ifcfg-eth/eth0
                  lsblk -o NAME,FSTYPE,LABEL,MOUNTPOINT,UUID,SIZE
                  tracert localhost
                  telnet ip-of-server port-number
                  /usr/bin/timeout 15 /usr/sbin/tcpdump -i any -c 5 udp dst port 54101
                  # sar debugging
                  sar -p/-d
                  sar -r -f /var/log/sa/sa05 
                  

                  # TCSTCP process debugging
                  watch -n 1 "ps -flwwu daemon"
                  watch -n 1 "ps -ef | grep [t]c3"
                  netstat -anpl | grep 9891
                  grep -A 4 "label=TcsTcpServer_COMMON_LTE" /opt/tc3/etc/config.ini 
                  # process log and stats
                  less /var/lib/truecall/log/`grep -A 4 "label=TcsTcpServer_COMMON_LTE" /opt/tc3/etc/config.ini | sed -n 's$[0-9]/label=$$p'`.log
                  less /var/lib/truecall/log/`grep -A 4 "label=TcsTcpServer_COMMON_LTE" /opt/tc3/etc/config.ini | sed -n 's$[0-9]/label=$$p'`.stat
                  # tc-cmd
                  . /opt/tc3/bin/tc3-env.sh && tc-cmd localhost 9891 user admin 123456 mega_report all_kpi_explorer time  2019-02-23T00:00:00.000 2019-02-23T00:00:00.001

                  # postgres database
                  service postgresql status
                  su postgres -c "psql tcadmin_production"
                    # \d \h \?
                    # select * from users;                    
                  su - postgres -c "pg_dump tcadmin_production -FC -t users -t user_user_groups -t user_groups -t user_permissions -t user_group_user_permissions > /tmp/user_database_setups_table_dump.sql"
                  su - postgres -c "pg_dump tcadmin_production -FC -t handset_database_setups > /tmp/handset_database_setups_table_dump.sql"
                  su - postgres -c "pg_dump tcadmin_production -FC > /tmp/database_backup.sql"
                  su - postgres -c "pg_dumpall > /tmp/databasedump_all.sql"
                  su - postgres -c "pg_restore --dbname=tcadmin_production /opt/tc3/scripts/handset_database_setups_table_dump.sql"
                  su - postgres -c "pg_restore --dbname=tcadmin_production /opt/tc3/scripts/database_backup.sql"
                  su - postgres -c "psql < /opt/tc3/scripts/databasedump_all.sql"
                  # first delete related tables, then import
                  su - postgres -c "psql -d tcadmin_production -c 'truncate handset_database_setups';pg_restore --dbname=tcadmin_production /opt/tc3/scripts/handset_database_setups_table_dump.sql" > log.txt 2>&1
                  for dump in *.dump; do table_name=`echo $dump | awk -F. '{print $1}'`;su - postgres -c "psql -d tcadmin_production -c 'truncate $table_name';pg_restore  --dbname=tcadmin_production /`pwd`/$dump"; done
                  
                  # NE table and handset database debugging, between ETL/LSR and TCSTCP
                  tree /var/lib/truecall/ne_tables/
                  su - postgres -c "psql -d tcadmin_production -c 'select * from lte_uploads'"
                  su - postgres -c "psql -d tcadmin_production -c 'select * from lte_network_elements'" > test.txt
                  su - postgres -c "psql -d tcadmin_production -c 'select * from lte_network_element_tables'" 
                  tree /var/lib/truecall/handset_database
                  su - postgres -c "psql -d tcadmin_production -c 'select * from  handset_database_uploaded_files'"
                  su - postgres -c "psql -d tcadmin_production -c 'select * from handset_database_setups'"
                  less /var/lib/truecall/handset_database/3GPP/active/devmap.tsv

                  # webclient install on TCSTCP SERVER only. Config tcaccess.ini on ETL/LSR server -> TCSTCP server
                  grep -A7 "^\[Database\]" /opt/tc3/etc/tcaccess.ini

                  # Webclient not on TCSTCP SERVER. configurations
                  grep -A6 "## Production Node 1" /opt/tc3/share/WebClient5/config/local_settings.rb
                  ./conf-database.sh; ./conf-webclient.sh
                  curl http://localhost/admin/login
                  tail -f /opt/tc3/share/WebClient5/log/production.log


                  # LSR
                  # LSR daemon config
                  grep -A 4 "LSR-server_COMMON_LTE" /opt/tc3/etc/config.ini 
                  less /opt/tc3/etc/lsr_config_COMMON_LTE.config

                  # lsr networking
                  netstat -anpl | grep -i lsr

                  # LSR process status
                  watch -n 1 "ps -flwwu daemon"
                  watch -n 1 "ps -ef | grep -i lsr"

                  # LSR optional arguments
                  . /opt/tc3/bin/tc3-env.sh && LSR-server -h | less
                    # -h / -v / -l
                    # --fragment-output-option
                    # --fragments-imsi-whitelist-path
                    # --exec-script
                    # --time-flush-buffer
                    # --time-finalize
                    # --time-per-file
                    # --allow-unknown-cols=1 

                  # process log and stats
                  less /var/lib/truecall/log/`grep -A 4 "LSR-server_COMMON_LTE" /opt/tc3/etc/config.ini | sed -n 's$[0-9]/label=$$p'`.log
                  less /var/lib/truecall/log/`grep -A 4 "LSR-server_COMMON_LTE" /opt/tc3/etc/config.ini | sed -n 's$[0-9]/label=$$p'`.stat
                  grep -i error /var/lib/truecall/log/LSR-server_COMMON_LTE.log | less

                  # check csv, csv_tmp dir
                  du -sh /var/lib/truecall/COMMON_LTE/csv/190224/05
                  tree /var/lib/truecall/COMMON_LTE/csv/190224/05
                  tree /var/lib/truecall/COMMON_LTE/csv_tmp

                  # check column names
                  cd /var/lib/truecall/COMMON_LTE/csv/190224/05; zcat 2019022405.1550959240146450.csv.gz | head -1 | tr -s ',' '\n' | nl
                  # check rrc count
                  echo "imsi,rrc,erab">test.txt; zcat 2019022405.1550959240146450.csv.gz | awk -F, 'NR>1{if($56=="False"){cell[$14]++; erab_count[$14]+=$57; if($11=="New Connection") rrc_count[$14]++}} END{n=asorti(cell,cell_sorted); for(i=1;i<=n;i++)print cell_sorted[i]","rrc_count[cell_sorted[i]]","erab_count[cell_sorted[i]]}'>>test.txt

                  # count_lsr.py -> go back to slides
                  /opt/tc3/scripts/count_lsr/test_count_lsr.sh
                  cat /opt/tc3/scripts/count_lsr/ip_host_mapping.yml
                  python /opt/tc3/scripts/count_lsr/count_lsr.py 190219
                  ls -ltr /opt/tc3/scripts/count_lsr/*txt

                  # LSR late file issue 



                  # ETL debugging
                  netstat -natp | grep –e ":7879.*LISTEN"
                  netstat -anpl | grep process
                  . /opt/tc3/bin/tc3-env.sh && processor-common-lte --help | less
                
              mode: "000755"
              owner: "root"
              group: "root"
            "/opt/scripts/rfb_install.sh":
              content: 
                Fn::Sub: |
                  #!/bin/bash

                  # Install RFB dependencies
                  #yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
                  #yum install -y armadillo arpack atlas blas dbus git gzip libcap-ng libunwind lzma mcelog mlpack net-snmp-libs perl sshpass tbb zlib hdf5 lapack libgfortran libgnome-keyring libicu libquadmath
                  #wget http://mirror.centos.org/centos/7/extras/x86_64/Packages/libssh-0.7.1-3.el7.x86_64.rpm; yum localinstall -y libssh-0.7.1-3.el7.x86_64.rpm

                  # validate RFB rpm with md5
                  rpm -K /opt/Netscout-FlowBroker-V7.17.4.0.3-1_cos731611el7.x86_64.rpm
                  # install RFB rpm
                  yum localinstall --nogpgcheck -y /opt/Netscout-FlowBroker-V7.17.4.0.3-1_cos731611el7.x86_64.rpm

                  # configure ne tables and site configurations
                  unzip -o /opt/xhhny82708_config.zip -d /opt/netscout-fb/standalone
                  #tar xvf /opt/JKT-RFB-01_config.tgz -C /opt/netscout-fb/standalone
                  mkdir /opt/netscout-fb/NETables; cp /opt/RFB_NE_TABLE_RRC_20181207.csv /opt/netscout-fb/NETables
                  

                  # start fbMon and manual run fbAutocluster
                  systemctl start fbMon
                  systemctl enable fbMon
                  /opt/netscout-fb/rtm/runfbautocluster 2>&1 >> /opt/netscout-fb/log/fbAutocluster.log
              mode: "000755"
              owner: "root"
              group: "root"
            "/opt/scripts/rfb_config.sh":
              content: 
                Fn::Sub: |
                  #!/bin/bash

                  # check rfb processors
                  watch -n 1 "ps -ef | grep [f]b"
                  # check fbServer config in fbMon
                  grep ^fbServer /opt/netscout-fb/current/etc/fbMon.conf
                  # check fbServer configurations
                  egrep "ListenPort|ini|yml" /opt/netscout-fb/current/etc/fbServer_SA.conf
                  # check EGRESS config. fb-instant: ip_port, fb-demux: ip_port_tpm
                  grep ip_port /opt/netscout-fb/current/config/gsrclusters*.yml
                  # fb-demux INGRESS config -> back to slides 38
                  cat /opt/netscout-fb/current/config/tpm.ini
                  # how to check fb-instant ingress?

                  # clusterconfig
                  # regions.yml git repo
                  grep Yaml /opt/netscout-fb/current/etc/fbServer_SA.conf
                  # NE table retrieval dir
                  grep ^NET /opt/netscout-fb/current/etc/fbAutocluster.conf
                  # latest NE tables 
                  ls -ltr /opt/netscout-fb/NETables | tail -3
                  # fb autocluster cron jobs
                  cat /etc/cron.hourly/fbAutocluster.cron
                  # check NE rsync
                  tree /opt/netscout-fb/standalone/config/.sync
                  cd /opt/netscout-fb/NETables; cp RFB_NE_TABLE_RRC_20181207.csv RFB_NE_TABLE_RRC_20181217.csv; /opt/netscout-fb/rtm/runfbautocluster 2>&1 >> /opt/netscout-fb/log/fbAutocluster.log
                  tree /opt/netscout-fb/standalone/config/.sync
                  # check git
                  cd /opt/netscout-fb/standalone/config
                  git log
                  tree .git
                  git config --local -l
                  git status

                  # clustering mapping
                  # markets in regions.yml
                  grep market: /opt/netscout-fb/standalone/config/regions.yml | sort | uniq
                  # regions under each market
                  grep '\-\ \&' /opt/netscout-fb/standalone/config/regions.yml
                  # markets feeding one fbServer instance
                  grep MarketId /opt/netscout-fb/standalone/etc/fbServer_SA.conf
                  # gsrClusters for one fbServer instance. should be 1:1 mapping to regions in one market
                  grep gsrCluster /opt/netscout-fb/standalone/config/gsrclusters_SA.yml
                  
                  # iris alarm cofnig -> slide 42
                  egrep "address|probeId" /opt/netscout-fb/current/etc/fbAlarm.conf

              mode: "000755"
              owner: "root"
              group: "root"    
            "/opt/scripts/rfb_debug.sh":
              content: 
                Fn::Sub: |
                  #!/bin/bash

                  # os debugging
                  journalctl
                  journalctl -k
                  top
                  free -h
                  less /var/log/messages
                  dmesg

                  # rfb debugging
                  yum info Netscout-FlowBroker
                  # log files
                  ls -ltr /opt/netscout-fb/log
                  less /opt/netscout-fb/log/fbServer_22227_`ps -ef | grep [f]bServer.*22227 | awk '{print $2}'`.log
                  less /opt/netscout-fb/log/fbServerStats_22227_`ps -ef | grep [f]bServer.*22227 | awk '{print $2}'`*.csv
                  
                  # rfbinfo package
                  /opt/netscout-fb/rtm/rfbinfo -r # -> /root/rfb_info_ip-172-31-15-223.ap-southeast-2.compute.internal_2019-02-24-07.33.36+0000.tar.gz

                  # strace -p <pid>, gdb -p <pid>
                  ps -ef | grep [f]bServer.*22227 | awk '{print $2}' | xargs strace -p
                  ps -ef | grep [f]bServer.*22227 | awk '{print $2}' | xargs gdb -p

                  # fbcmd debugging
                  /opt/netscout-fb/rtm/fbcmd -l 22227 -c "showreceivers"
                  /opt/netscout-fb/rtm/fbcmd -l 22227 -c "showactivesenders"
                  tar xvf /opt/JKT-RFB-01_config.tgz -C /opt/netscout-fb/standalone; systemctl restart fbMon; 
                  /opt/netscout-fb/rtm/fbcmd -l 22224 -c "tpm: showenodebstats 13"
                  cat /opt/netscout-fb/current/config/tpm.ini
                  unzip -o /opt/xhhny82708_config.zip -d /opt/netscout-fb/standalone; systemctl restart fbMon

                  # NE TABLE git health check and rollback
                  cd /opt/netscout-fb/standalone/config
                  git log # -> git diff <commit_1> <commit_2>
                  git diff <commit>
                  git show <commit>:regions.yml >> ~/regions.yml
                  wc -l ~/regions.yml regions.yml
                  # soft rollback
                  cp ~/regions.yml /opt/netscout-fb/NETables
                  # manually load in
                  /opt/netscout-fb/rtm/runfbautocluster 2>&1 >> /opt/netscout-fb/log/fbAutocluster.log
                  wc -l regions.yml
                  git log

                  # rfb network debugging
                  netstat -anpl | grep 22227
                  /usr/bin/timeout 15 /usr/sbin/tcpdump -i any -c 5 udp dst port 22227

                  # enable coredump
                  sudo su -
                  mkdir /tmp/cores; chmod 777 /tmp/cores
                  echo "/tmp/cores/core.%e.%p.%h.%t" > /proc/sys/kernel/core_pattern
                  sed -i '$s/^/ulimit -c unlimited\n/' /opt/netscout-fb/rtm/runfbserver
                  systemctl restart fbMon

                  
              mode: "000755"
              owner: "root"
              group: "root" 
            "/opt/scripts/upload_tc_rfb_config.sh":
              content: 
                Fn::Sub: |
                  #!/bin/bash

                  yum install -y dos2unix; dos2unix /opt/scripts/*sh /opt/tc3/scripts/*/*.{sh,py}
                  tar czvf tc_install.tar.gz truecall_install.sh -C /opt/tc3/scripts/ {one_server_config.ini,lte_local_settings.rb,VIC_TAS_COMMON_LTE_201806220033.txt,handset_table.zip,handset_database_setups_table_dump.sql,database_backup.sql,databasedump_all.sql}
                  tar czvf tc_scripts.tar.gz truecall_debug.sh -C /opt/tc3/scripts/ {one_server_config.ini,lte_local_settings.rb,VIC_TAS_COMMON_LTE_201806220033.txt,handset_table.zip,handset_database_setups_table_dump.sql,database_backup.sql,databasedump_all.sql,cell_converter,rrc_count_analysis,migrate_users,count_lsr}
                  tar czvf tc_rfb_install_debug.tar.gz tc_install.tar.gz tc_scripts.tar.gz rfb*.sh
                  aws s3 cp tc_rfb_install_debug.tar.gz s3://ansible-test-kaiyuan/
                  aws s3 cp tc_scripts.tar.gz s3://ansible-test-kaiyuan/
                  
                  tar czvf opt_scripts.tar.gz -C /opt/scripts *.sh
                  aws s3 cp opt_scripts.tar.gz s3://ansible-test-kaiyuan/

              mode: "000755"
              owner: "root"
              group: "root"          
          commands:
            config_ansible_connections:
              command: 'sed -i "s/production$/production_test/g" /opt/ansible/ansible.cfg; sed -i "s/^control/control ansible_connection=local/g" /opt/ansible/production_test'
            config_etc_hosts:
              command: 'private_ip=`curl http://169.254.169.254/latest/meta-data/local-ipv4`; sed -i "s/^control$/${private_ip} control/g" /etc/hosts'
            config_ansible_privileges:
              command: |
                chmod 755 -R /opt/ansible
                chown -R ec2-user:ec2-user /opt/ansible
            update_package_vars:
              command: "/opt/scripts/download_ansible_packages.sh"       
Outputs:
  ControlPublicIp:
    Description: Public IP address of the control server
    Value:
      Fn::GetAtt: [ "ControlHost", "PublicIp" ]





