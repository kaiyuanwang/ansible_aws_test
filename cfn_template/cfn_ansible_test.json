{"Metadata": {"AWS::CloudFormation::Interface": {"ParameterGroups": [{"Label": {"default": "EC2 Configuration"}, "Parameters": ["SSHLocation", "VpcId", "InstanceType"]}, {"Label": {"default": "Connection Configuration"}, "Parameters": ["KeyName", "RoleName"]}, {"Label": {"default": "Ansible Configuration"}, "Parameters": ["AnsiblePackage", "TrueCallPackage", "GsrPackage", "ConfigAnsibleOutputConf", "ConfigAnsiblePkg", "TruecallSiteBackup"]}]}}, "Parameters": {"ConfigAnsiblePkg": {"ConstraintDescription": "Available Ansible Configuration file pkg.", "Description": "Software package of config_ansible.py in s3://ansible-test-kaiyuan bucket", "Type": "String", "Default": "config_ansible.zip"}, "TruecallSiteBackup": {"ConstraintDescription": "Available TrueCall site backup demos.", "Description": "Site backups of TrueCall servers in s3://ansible-test-kaiyuan bucket", "Type": "String", "Default": "Truecall_backup_20181119.zip"}, "InstanceType": {"ConstraintDescription": "must be a valid EC2 instance type.", "Default": "t2.micro", "Description": "EC2 instance type", "AllowedValues": ["t1.micro", "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"], "Type": "String"}, "VpcId": {"Description": "VpcId of your existing Virtual Private Cloud (VPC)", "Type": "AWS::EC2::VPC::Id", "Default": "vpc-0fa16d5fa89c52bd9"}, "ConfigAnsibleOutputConf": {"ConstraintDescription": "Available Ansible Configuration files.", "Description": "Ansible Configuration files in s3://ansible-test-kaiyuan bucket. Generated by config_ansible.py. Available options are 1 server config_ansible_output_one_server.zip, and 3 servers config_ansible_output_aws.zip", "Type": "String", "Default": "config_ansible_output_aws.zip"}, "KeyName": {"ConstraintDescription": "must be the name of an existing EC2 KeyPair.", "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances", "Type": "AWS::EC2::KeyPair::KeyName", "Default": "MyEC2KeyPair"}, "GsrPackage": {"ConstraintDescription": "Available Gsr package file.", "Description": "Gsr package name in s3://ansible-test-kaiyuan bucket", "Type": "String", "Default": "GSRservices-V7.17.3.0.3_PR_CP23-0_el7.x86_64.rpm"}, "OptScriptPkg": {"ConstraintDescription": "Available Operation script pkg.", "Description": "Operation script pkg uploaded to s3://ansible-test-kaiyuan bucket. From /opt in cf_ansible_test_one_server.yml", "Type": "String", "Default": "opt_scripts.tar.gz"}, "SSHLocation": {"ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.", "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})", "Description": "The IP address range that can be used to SSH to the EC2 instances", "MinLength": "9", "MaxLength": "18", "Type": "String"}, "RoleName": {"ConstraintDescription": "must be the name of an existing IAM Role.", "Description": "Name of IAM Role for EC2 instances", "Type": "String", "Default": "S3-Admin-Access"}, "TrueCallPackage": {"ConstraintDescription": "Available TrueCall package,", "Description": "TrueCall package name in s3://ansible-test-kaiyuan bucket", "Type": "String", "Default": "TrueCall-Server-17.3.0.16-0-gaa28f3b-el7-x86_64.rpm"}, "AnsiblePackage": {"ConstraintDescription": "Available ansible package", "Description": "ansible package name in s3://ansible-test-kaiyuan bucket", "Type": "String", "Default": "ansible_truecall_v17.3_02Nov18.tar.gz"}}, "Description": "AWS Cloudformation template for TrueCall ansible test\n1 control, 2 slaves, can extend to more\nDependecies:\n  1. S3 bucket with pem file, packages, applications\n  2. IAM role for S3 access\n  3. Security group for My IP access only\n  4. Building of control server depends on successful built of slave servers\nFunctions:\n  1. build 1 control server and 2 slave servers with all application dependency packages \n  2. On control, install ansible, git, copy applicaiton packages from private s3 bucket\n  3. Use pem file from private s3 bucket for passwordless connections between all servers. change to rsa pair for enhanced security later.\n  4. Update contorl /etc/hosts with slave IPs\n  5. Need to update security group to allow laptop ip access\n  6. Use AWS cfn-init for cloudformation metadata control\n  7. Control server building depends on slave servers. Automatically roll back if control built fails.\n  8. Output server public IPs in cloudformation IP\n", "Resources": {"AnsibleTestSecurityGroup": {"Properties": {"VpcId": {"Ref": "VpcId"}, "SecurityGroupIngress": [{"ToPort": "22", "CidrIp": {"Ref": "SSHLocation"}, "FromPort": "22", "IpProtocol": "tcp", "Description": "ssh"}, {"ToPort": "80", "CidrIp": "0.0.0.0/0", "FromPort": "80", "IpProtocol": "tcp", "Description": "http"}, {"ToPort": "8443", "CidrIp": "0.0.0.0/0", "FromPort": "8443", "IpProtocol": "tcp", "Description": "https"}, {"ToPort": "9891", "CidrIp": "0.0.0.0/0", "FromPort": "9891", "IpProtocol": "tcp", "Description": "TrueCall"}], "GroupDescription": "Security group for Ansible Test Servers"}, "Type": "AWS::EC2::SecurityGroup"}, "AnsibleTestSecurityGroupIngress": {"Properties": {"GroupId": {"Ref": "AnsibleTestSecurityGroup"}, "ToPort": "65535", "SourceSecurityGroupId": {"Ref": "AnsibleTestSecurityGroup"}, "FromPort": "0", "IpProtocol": "tcp"}, "Type": "AWS::EC2::SecurityGroupIngress"}, "SlaveHost1": {"Description": "Ansible Slave host 1", "Properties": {"SecurityGroupIds": [{"Ref": "AnsibleTestSecurityGroup"}], "Tags": [{"Key": "Type", "Value": "Slave"}], "InstanceType": {"Ref": "InstanceType"}, "ImageId": {"Fn::FindInMap": ["AWSRegionArch2AMI", {"Ref": "AWS::Region"}, {"Fn::FindInMap": ["AWSInstanceType2Arch", {"Ref": "InstanceType"}, "Arch"]}]}, "KeyName": {"Ref": "KeyName"}, "UserData": {"Fn::Base64": {"Fn::Sub": "#!/bin/bash -xe\n# Install Base System Software\nyum groupinstall -y @core @debugging @development @hardware-monitoring @large-systems @performance @postgresql @security-tools @web-server @hardware-monitoring @large-systems @system-admin-tools @system-management @system-management-snmp --setopt=group_package_types=mandatory,default,optional\nyum install -y chrony python-psycopg2 httpd-tools libICE libSM libicu libyaml mailcap python-markupsafe perl-Archive-Zip protobuf libunwind sysfsutils lynx base install htop iftop ncurses-compat-libs postgresql postgresql-server tree\nyum update -y\nmkdir /var/lib/truecall\nchmod 777 /var/lib/truecall\n"}}}, "Type": "AWS::EC2::Instance"}, "SlaveHost2": {"Description": "Ansible Slave host 2", "Properties": {"SecurityGroupIds": [{"Ref": "AnsibleTestSecurityGroup"}], "Tags": [{"Key": "Type", "Value": "Slave"}], "InstanceType": {"Ref": "InstanceType"}, "ImageId": {"Fn::FindInMap": ["AWSRegionArch2AMI", {"Ref": "AWS::Region"}, {"Fn::FindInMap": ["AWSInstanceType2Arch", {"Ref": "InstanceType"}, "Arch"]}]}, "KeyName": {"Ref": "KeyName"}, "UserData": {"Fn::Base64": {"Fn::Sub": "#!/bin/bash -xe\n# Install Base System Software\nyum groupinstall -y @core @debugging @development @hardware-monitoring @large-systems @performance @postgresql @security-tools @web-server @hardware-monitoring @large-systems @system-admin-tools @system-management @system-management-snmp --setopt=group_package_types=mandatory,default,optional\nyum install -y chrony python-psycopg2 httpd-tools libICE libSM libicu libyaml mailcap python-markupsafe perl-Archive-Zip protobuf libunwind sysfsutils lynx base install htop iftop ncurses-compat-libs postgresql postgresql-server tree\nyum update -y\nmkdir /var/lib/truecall\nchmod 777 /var/lib/truecall\n"}}}, "Type": "AWS::EC2::Instance"}, "ControlHost": {"Metadata": {"Comment": "1. Config passwordless connection to slaves. 2. Fetch packages. 3. Install ansible. 4. Install git. 5. YUM update.", "AWS::CloudFormation::Init": {"config": {"files": {"/etc/hosts": {"content": {"Fn::Sub": "127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 control\n::1         localhost6 localhost6.localdomain6\ncontrol\n${SlaveHost1.PrivateIp} slave_1\n${SlaveHost2.PrivateIp} slave_2\n"}, "group": "root", "owner": "root", "mode": "000755"}, "/etc/cfn/hooks.d/cfn-auto-reloader.conf": {"content": {"Fn::Sub": "[cfn-auto-reloader-hook]\ntriggers=post.update\npath=Resources.ControlHost.Metadata.AWS::CloudFormation::Init\naction=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ControlHost --region ${AWS::Region}\n"}, "group": "root", "owner": "root", "mode": "000400"}, "/etc/cfn/cfn-hup.conf": {"content": {"Fn::Sub": "[main]\nstack=${AWS::StackId}\nregion=${AWS::Region}\n"}, "group": "root", "owner": "root", "mode": "000400"}, "/home/ec2-user/.ssh/MyEC2KeyPair.pem": {"group": "ec2-user", "source": "https://ansible-test-kaiyuan.s3.amazonaws.com/MyEC2KeyPair.pem", "owner": "ec2-user", "mode": "000400"}, "/home/ec2-user/.ssh/config": {"content": "Host slave_1\nIdentityFile ~/.ssh/MyEC2KeyPair.pem\nHost slave_2\nIdentityFile ~/.ssh/MyEC2KeyPair.pem\nHost control\nIdentityFile ~/.ssh/MyEC2KeyPair.pem\n", "group": "ec2-user", "owner": "ec2-user", "mode": "000400"}}, "sources": {"/opt/tc3/scripts": {"Fn::Join": ["/", ["https://ansible-test-kaiyuan.s3.amazonaws.com", "tc_scripts.tar.gz"]]}, "/opt/config_ansible/Truecall_backup": {"Fn::Join": ["/", ["https://ansible-test-kaiyuan.s3.amazonaws.com", {"Ref": "TruecallSiteBackup"}]]}, "/opt/config_ansible": {"Fn::Join": ["/", ["https://ansible-test-kaiyuan.s3.amazonaws.com", {"Ref": "ConfigAnsiblePkg"}]]}, "/opt": {"Fn::Join": ["/", ["https://ansible-test-kaiyuan.s3.amazonaws.com", {"Ref": "AnsiblePackage"}]]}, "/opt/scripts": {"Fn::Join": ["/", ["https://ansible-test-kaiyuan.s3.amazonaws.com", {"Ref": "OptScriptPkg"}]]}, "/opt/ansible": {"Fn::Join": ["/", ["https://ansible-test-kaiyuan.s3.amazonaws.com", {"Ref": "ConfigAnsibleOutputConf"}]]}}, "commands": {"update_package_vars": {"command": "/opt/scripts/download_ansible_packages.sh"}, "config_ansible_privileges": {"command": "chmod 755 -R /opt/ansible\nchown -R ec2-user:ec2-user /opt/ansible\n"}, "config_etc_hosts": {"command": "private_ip=`curl http://169.254.169.254/latest/meta-data/local-ipv4`; sed -i \"s/^control$/${private_ip} control/g\" /etc/hosts"}, "config_ansible_connections": {"command": "sed -i \"s/production$/production_test/g\" /opt/ansible/ansible.cfg; sed -i \"s/^control/control ansible_connection=local/g\" /opt/ansible/production_test"}}}}, "AWS::CloudFormation::Authentication": {"S3AccessCreds": {"type": "S3", "roleName": {"Ref": "RoleName"}, "buckets": ["ansible-test-kaiyuan"]}}}, "CreationPolicy": {"ResourceSignal": {"Timeout": "PT15M"}}, "DependsOn": ["SlaveHost1", "SlaveHost2"], "Properties": {"SecurityGroupIds": [{"Ref": "AnsibleTestSecurityGroup"}], "Tags": [{"Key": "Type", "Value": "Control"}], "InstanceType": {"Ref": "InstanceType"}, "IamInstanceProfile": {"Ref": "RoleName"}, "ImageId": {"Fn::FindInMap": ["AWSRegionArch2AMI", {"Ref": "AWS::Region"}, {"Fn::FindInMap": ["AWSInstanceType2Arch", {"Ref": "InstanceType"}, "Arch"]}]}, "KeyName": {"Ref": "KeyName"}, "UserData": {"Fn::Base64": {"Fn::Sub": "#!/bin/bash -xe\n# Get the latest CloudFormation package\nyum update -y aws-cfn-bootstrap\n# Start cfn-init\n/opt/aws/bin/cfn-init -s ${AWS::StackId} -r ControlHost --region ${AWS::Region} || error_exit 'Failed to run cfn-init'\n# Start up the cfn-hup daemon to listen for changes to the EC2 instance metadata\n/opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'\n\n# Install truecall dependencies\nyum groupinstall -y @core @debugging @development @hardware-monitoring @large-systems @performance @postgresql @security-tools @web-server @hardware-monitoring @large-systems @system-admin-tools @system-management @system-management-snmp --setopt=group_package_types=mandatory,default,optional\nyum install -y chrony python-psycopg2 httpd-tools libICE libSM libicu libyaml mailcap python-markupsafe perl-Archive-Zip protobuf libunwind sysfsutils lynx base install htop iftop ncurses-compat-libs postgresql postgresql-server mod_ssl\n\n# install git, ansible, pandas\nyum -y install git python-pip tree\namazon-linux-extras install ansible2 -y\npip install numpy pandas xlrd xlsxwriter\nyum update -y\ncd /opt/ansible\ngit init\n\n\n# All done so signal success\n/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource ControlHost --region ${AWS::Region}\n"}}}, "Description": "Ansible control host", "Type": "AWS::EC2::Instance"}}, "Mappings": {"AWSRegionArch2AMI": {"ap-southeast-2": {"HVM64": "ami-08589eca6dcc9b39c"}}, "AWSInstanceType2Arch": {"t2.nano": {"Arch": "HVM64"}, "t2.small": {"Arch": "HVM64"}, "t2.micro": {"Arch": "HVM64"}, "t2.medium": {"Arch": "HVM64"}, "t2.large": {"Arch": "HVM64"}}}, "Outputs": {"ControlPublicIp": {"Value": {"Fn::GetAtt": ["ControlHost", "PublicIp"]}, "Description": "Public IP address of the control server"}, "Slave1PublicIp": {"Value": {"Fn::GetAtt": ["SlaveHost1", "PublicIp"]}, "Description": "Public IP address of the slave1 server"}, "Slave2PublicIp": {"Value": {"Fn::GetAtt": ["SlaveHost2", "PublicIp"]}, "Description": "Public IP address of the slave2 server"}}, "AWSTemplateFormatVersion": "2010-09-09"}