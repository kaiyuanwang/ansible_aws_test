AWSTemplateFormatVersion: '2010-09-09'
Description: "AWS Cloudformation template generated by troposphere.\nDependecies:\n\
  1. S3 bucket with docker templates\n2. IAM role for S3 access\n3. Security group\
  \ for My IP access only\n"
Mappings:
  AWSInstanceType2Arch:
    t2.large:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.small:
      Arch: HVM64
  AWSRegionArch2AMI:
    ap-southeast-2:
      HVM64: ami-08589eca6dcc9b39c
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: EC2 Configuration
        Parameters:
          - SSHLocation
          - VpcId
          - InstanceType
      - Label:
          default: Connection Configuration
        Parameters:
          - KeyName
          - RoleName
Outputs:
  ControlPublicIp:
    Description: Public IP address of the control server
    Value: !GetAtt 'ServerlessDockerControl.PublicIp'
Parameters:
  InstanceType:
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - g2.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
    Default: t2.micro
    Description: EC2 instance type
    Type: String
  KeyName:
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: MyEC2KeyPair
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
  RoleName:
    ConstraintDescription: must be the name of an existing IAM Role.
    Default: S3-Admin-Access
    Description: Name of IAM Role for EC2 instances
    Type: String
  SSHLocation:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Description: The IP address range that can be used to SSH to the EC2 instances
    MaxLength: '18'
    MinLength: '9'
    Type: String
  VpcId:
    Default: vpc-0fa16d5fa89c52bd9
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    Type: AWS::EC2::VPC::Id
Resources:
  ServerlessDockerControl:
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          buckets:
            - lambda-code-kaiyuan
            - ansible-test-kaiyuan
          roleName: !Ref 'RoleName'
          type: S3
      AWS::CloudFormation::Init:
        config:
          commands:
            config_etc_hosts:
              command: private_ip=`curl http://169.254.169.254/latest/meta-data/local-ipv4`;
                sed -i "s/^control$/${private_ip} control/g" /etc/hosts
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub "[main]\nstack=${AWS::StackId}\nregion=${AWS::Region}"
              group: root
              mode: '000755'
              owner: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub "[cfn-auto-reloader-hook]\ntriggers=post.update\npath=Resources.ServerlessDockerControl.Metadata.AWS::CloudFormation::Init\n\
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource\
                \ ServerlessDockerControl --region ${AWS::Region}"
              group: root
              mode: '000755'
              owner: root
            /etc/hosts:
              content: !Sub "127.0.0.1   localhost localhost.localdomain localhost4\
                \ localhost4.localdomain4 control\n::1         localhost6 localhost6.localdomain6\n\
                ServerlessDockerControl\n"
              group: root
              mode: '000755'
              owner: root
            /home/ec2-user/.ssh/config:
              content: !Sub "Host ServerlessDockerControl\nIdentityFile ~/.ssh/MyEC2KeyPair.pem\n"
              group: root
              mode: '000755'
              owner: root
          sources:
            /root/python-config-ansible-s3: https://lambda-code-kaiyuan.s3.amazonaws.com/python-config-ansible-s3.zip
            /root/scripts: https://lambda-code-kaiyuan.s3.amazonaws.com/sls_scripts.tar.gz
            /root/serverless-website: https://lambda-code-kaiyuan.s3.amazonaws.com/serverless-website.zip
    Properties:
      IamInstanceProfile: !Ref 'RoleName'
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap
          - AWSInstanceType2Arch
          - !Ref 'InstanceType'
          - Arch
      InstanceType: !Ref 'InstanceType'
      KeyName: !Ref 'KeyName'
      SecurityGroupIds:
        - !Ref 'TestSecurityGroup'
      Tags:
        - Key: Type
          Value: Control
      UserData: !Base64
        Fn::Sub: "#!/bin/bash -xe\n        # pre_config, putting at start of file\
          \ will break the userdata\nyum update -y\nyum install git python-pip tree\
          \ dos2unix python3 -y\npip install boto3 pyyaml numpy pandas xlrd requests\
          \ xlsxwriter\npip3 install boto3 pyyaml numpy pandas xlrd requests xlsxwriter\n\
          \n\n\n# cfn_init\nyum update -y aws-cfn-bootstrap\naws s3 cp s3://ansible-test-kaiyuan/MyEC2KeyPair.pem\
          \ /home/ec2-user/.ssh/\n# Start cfn-init\n/opt/aws/bin/cfn-init -s ${AWS::StackId}\
          \ -r ServerlessDockerControl --region ${AWS::Region} || error_exit 'Failed\
          \ to run cfn-init'\n# Start up the cfn-hup daemon to listen for changes\
          \ to the EC2 instance metadata\n/opt/aws/bin/cfn-hup || error_exit 'Failed\
          \ to start cfn-hup'\n\n\n\n# serverless\ncurl https://raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh\
          \ --output ~/nvm_install.sh\nexport HOME=/root\nbash ~/nvm_install.sh \n\
          . ~/.nvm/nvm.sh\nnvm install node\nnvm use node\nnode -e \"console.log('Running\
          \ Node.js ' + process.version)\"\nnpm install -g serverless\naws s3 cp s3://ansible-test-kaiyuan/lambda_credentials.csv\
          \ .; dos2unix lambda_credentials.csv\n`awk -F'\t' 'NR>1{printf \"serverless\
          \ config credentials --provider aws --key \"$2\" --secret \"$3\" --profile\
          \ \"$1}' lambda_credentials.csv`\n\n# docker\namazon-linux-extras install\
          \ docker -y\nservice docker start\nusermod -a -G docker ec2-user\ncurl -L\
          \ https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname\
          \ -s`-`uname -m` -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n\
          aws s3 cp s3://ansible-test-kaiyuan/docker-compose.yml /root/\nbase=https://github.com/docker/machine/releases/download/v0.16.0\
          \ &&\ncurl -L $base/docker-machine-$(uname -s)-$(uname -m) >/tmp/docker-machine\
          \ &&\nsudo install /tmp/docker-machine /usr/local/bin/docker-machine\n#curl\
          \ -sLf https://spacevim.org/install.sh | bash\naws s3 cp s3://lambda-code-kaiyuan/aws-lambda-20190103.zip\
          \ /root/\ngit clone https://github.com/BretFisher/udemy-docker-mastery.git\
          \ /root/udemy-docker-mastery\n\n\n# cfn_signal\nchmod 400 /home/ec2-user/.ssh/*\n\
          chown ec2-user:ec2-user /home/ec2-user/.ssh/*\n# All done so signal success\n\
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource ServerlessDockerControl\
          \ --region ${AWS::Region}\n"
    Type: AWS::EC2::Instance
  TestSecurityGroup:
    Properties:
      GroupDescription: Security group for Docker sls Test Servers
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          Description: http
          FromPort: '80'
          IpProtocol: tcp
          ToPort: '80'
        - CidrIp: '0.0.0.0/0'
          Description: https
          FromPort: '8443'
          IpProtocol: tcp
          ToPort: '8443'
        - CidrIp: !Ref 'SSHLocation'
          Description: ssh
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '22'
      VpcId: !Ref 'VpcId'
    Type: AWS::EC2::SecurityGroup
  TestSecurityGroupIngress:
    Properties:
      FromPort: '0'
      GroupId: !Ref 'TestSecurityGroup'
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref 'TestSecurityGroup'
      ToPort: '65535'
    Type: AWS::EC2::SecurityGroupIngress
