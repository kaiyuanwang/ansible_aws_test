Description: |
  AWS Cloudformation template for Docker and serverless framework testing
  Dependecies:
    1. S3 bucket with docker templates
    2. IAM role for S3 access
    3. Security group for My IP access only
AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    Default: MyEC2KeyPair
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  RoleName:
    Description: Name of IAM Role for EC2 instances
    Type: "String"
    Default: "S3-Admin-Access"
    ConstraintDescription: must be the name of an existing IAM Role.
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Default: vpc-0fa16d5fa89c52bd9
    Description: VpcId of your existing Virtual Private Cloud (VPC)
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t1.micro, t2.nano, t2.micro, t2.small, t2.medium, t2.large, m1.small,
      m1.medium, m1.large, m1.xlarge, m2.xlarge, m2.2xlarge, m2.4xlarge, m3.medium,
      m3.large, m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge,
      m4.10xlarge, c1.medium, c1.xlarge, c3.large, c3.xlarge, c3.2xlarge, c3.4xlarge,
      c3.8xlarge, c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, g2.2xlarge,
      g2.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge, r3.8xlarge, i2.xlarge,
      i2.2xlarge, i2.4xlarge, i2.8xlarge, d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge,
      hi1.4xlarge, hs1.8xlarge, cr1.8xlarge, cc2.8xlarge, cg1.4xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "EC2 Configuration"
        Parameters:
          - SSHLocation
          - VpcId
          - InstanceType
      - Label:
          default: "Connection Configuration"
        Parameters:
          - KeyName
          - RoleName      

Mappings:
  AWSInstanceType2Arch:
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
  AWSRegionArch2AMI:
    ap-southeast-2:
      HVM64: ami-08589eca6dcc9b39c

Resources:
  DockerSlsSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Security group for Docker sls Test Servers
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: !Ref SSHLocation
          FromPort: '22'
          ToPort: '22'
          Description: ssh
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: '80'
          ToPort: '80'
          Description: http
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: '8443'
          ToPort: '8443'
          Description: https
  DockerSlsSecurityGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: 
        Ref: DockerSlsSecurityGroup
      IpProtocol: tcp
      FromPort: '0'
      ToPort: '65535'
      SourceSecurityGroupId:
        Ref: DockerSlsSecurityGroup


  DockerSlsTestServer:
    Description: "Server for Docker and serverless framework test"
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'RoleName'
      SecurityGroupIds: [!Ref 'DockerSlsSecurityGroup']
      KeyName: !Ref 'KeyName'
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', !FindInMap [AWSInstanceType2Arch,
          !Ref 'InstanceType', Arch]]
      Tags:
        -
          Key: Type
          Value: DockerServerless
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe

            # Get the latest CloudFormation package
            yum update -y aws-cfn-bootstrap
            # Start cfn-init
            /opt/aws/bin/cfn-init -s ${AWS::StackId} -r DockerSlsTestServer --region ${AWS::Region} || error_exit 'Failed to run cfn-init'
            # Start up the cfn-hup daemon to listen for changes to the EC2 instance metadata
            /opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'

            curl https://raw.githubusercontent.com/creationix/nvm/v0.32.0/install.sh --output ~/nvm_install.sh
            export HOME=/root
            bash ~/nvm_install.sh 
            . ~/.nvm/nvm.sh
            nvm install node
            nvm use node
            node -e "console.log('Running Node.js ' + process.version)"
            npm install -g serverless
            aws s3 cp s3://ansible-test-kaiyuan/lambda_credentials.csv .
            `awk -F'\t' 'NR>1{printf "serverless config credentials --provider aws --key "$2" --secret "$3" --profile "$1}' lambda_credentials.csv`
            yum update -y
            amazon-linux-extras install docker -y
            service docker start
            usermod -a -G docker ec2-user
            aws s3 cp s3://lambda-code-kaiyuan/aws-lambda-20190103.zip /root/
            curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose
            aws s3 cp s3://ansible-test-kaiyuan/docker-compose.yml /root/
            base=https://github.com/docker/machine/releases/download/v0.16.0 &&
            curl -L $base/docker-machine-$(uname -s)-$(uname -m) >/tmp/docker-machine &&
            sudo install /tmp/docker-machine /usr/local/bin/docker-machine
            yum install git -y
            git clone https://github.com/BretFisher/udemy-docker-mastery.git /root/udemy-docker-mastery
            #curl -sLf https://spacevim.org/install.sh | bash            

            # All done so signal success
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource DockerSlsTestServer --region ${AWS::Region}

    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: 
            Ref: RoleName
          buckets: 
            - lambda-code-kaiyuan
            - ansible-test-kaiyuan
      AWS::CloudFormation::Init:
        config:
          sources:
            "/root": 
              Fn::Join: [ '/', [ "https://lambda-code-kaiyuan.s3.amazonaws.com", "python-s3-thumbnail.zip" ]] 
          files:
            "/etc/cfn/cfn-hup.conf":
              content: 
                Fn::Sub: |
                  [main]
                  stack=${AWS::StackId}
                  region=${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: 
                Fn::Sub: |
                  [cfn-auto-reloader-hook]
                  triggers=post.update
                  path=Resources.ControlHost.Metadata.AWS::CloudFormation::Init
                  action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ControlHost --region ${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"


           
Outputs:
  ControlPublicIp:
    Description: Public IP address of the control server
    Value:
      !GetAtt DockerSlsTestServer.PublicIp



