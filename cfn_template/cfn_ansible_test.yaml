AWSTemplateFormatVersion: '2010-09-09'
Description: "AWS Cloudformation template for Docker and serverless framework testing\n\
  Dependecies:\n1. S3 bucket with docker templates\n2. IAM role for S3 access\n3.\
  \ Security group for My IP access only\n"
Mappings:
  AWSInstanceType2Arch:
    t2.large:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.small:
      Arch: HVM64
  AWSRegionArch2AMI:
    ap-southeast-2:
      HVM64: ami-08589eca6dcc9b39c
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: EC2 Configuration
        Parameters:
          - SSHLocation
          - VpcId
          - InstanceType
      - Label:
          default: Connection Configuration
        Parameters:
          - KeyName
          - RoleName
      - Label:
          default: Ansible Configuration
        Parameters:
          - AnsiblePackage
          - TrueCallPackage
          - GsrPackage
          - ConfigAnsibleOutputConf
          - ConfigAnsiblePkg
          - TruecallSiteBackup
Outputs:
  CfnAnsibleTestSlave1PublicIp:
    Description: Public IP address of the control server
    Value: !GetAtt 'CfnAnsibleTestSlave1.PublicIp'
  ControlPublicIp:
    Description: Public IP address of the control server
    Value: !GetAtt 'CfnAnsibleTestControl.PublicIp'
Parameters:
  AnsiblePackage:
    ConstraintDescription: Available ansible package
    Default: ansible_truecall_v17.3_02Nov18.tar.gz
    Description: ansible package name in s3://ansible-test-kaiyuan bucket
    Type: String
  ConfigAnsibleOutputConf:
    ConstraintDescription: Available Ansible Configuration files.
    Default: config_ansible_output_aws.zip
    Description: >-
      Ansible Configuration files in s3://ansible-test-kaiyuan bucket. Generated by
      config_ansible.py. Available options are 1 server config_ansible_output_one_server.zip,
      and 3 servers config_ansible_output_aws.zip
    Type: String
  ConfigAnsiblePkg:
    ConstraintDescription: Available Ansible Configuration file pkg.
    Default: config_ansible.zip
    Description: Software package of config_ansible.py in s3://ansible-test-kaiyuan
      bucket
    Type: String
  GsrPackage:
    ConstraintDescription: Available Gsr package file.
    Default: GSRservices-V7.17.3.0.3_PR_CP23-0_el7.x86_64.rpm
    Description: Gsr package name in s3://ansible-test-kaiyuan bucket
    Type: String
  InstanceType:
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - g2.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
    Default: t2.micro
    Description: EC2 instance type
    Type: String
  KeyName:
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    Default: MyEC2KeyPair
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
  OptScriptPkg:
    ConstraintDescription: Available Operation script pkg.
    Default: opt_scripts.tar.gz
    Description: Operation script pkg uploaded to s3://ansible-test-kaiyuan bucket.
      From /opt in cf_ansible_test_one_server.yml
    Type: String
  RoleName:
    ConstraintDescription: must be the name of an existing IAM Role.
    Default: S3-Admin-Access
    Description: Name of IAM Role for EC2 instances
    Type: String
  SSHLocation:
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
    Description: The IP address range that can be used to SSH to the EC2 instances
    MaxLength: '18'
    MinLength: '9'
    Type: String
  TrueCallPackage:
    ConstraintDescription: Available TrueCall package,
    Default: TrueCall-Server-17.3.0.16-0-gaa28f3b-el7-x86_64.rpm
    Description: TrueCall package name in s3://ansible-test-kaiyuan bucket
    Type: String
  TruecallSiteBackup:
    ConstraintDescription: Available TrueCall site backup demos.
    Default: Truecall_backup_20181119.zip
    Description: Site backups of TrueCall servers in s3://ansible-test-kaiyuan bucket
    Type: String
  VpcId:
    Default: vpc-0fa16d5fa89c52bd9
    Description: VpcId of your existing Virtual Private Cloud (VPC)
    Type: AWS::EC2::VPC::Id
Resources:
  CfnAnsibleTestControl:
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          buckets:
            - lambda-code-kaiyuan
            - ansible-test-kaiyuan
          roleName: !Ref 'RoleName'
          type: S3
      AWS::CloudFormation::Init:
        config:
          commands:
            test:
              command: echo "$CFNTEST" > text.txt
              cwd: '~'
              env:
                CFNTEST: I come from config2.
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub "[main]\nstack=${AWS::StackId}\nregion=${AWS::Region}"
              group: root
              mode: '000400'
              owner: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub "[cfn-auto-reloader-hook]\ntriggers=post.update\npath=Resources.ControlHost.Metadata.AWS::CloudFormation::Init\n\
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource\
                \ ControlHost --region ${AWS::Region}"
              group: root
              mode: '000400'
              owner: root
          sources:
            root: https://lambda-code-kaiyuan.s3.amazonaws.com/python-s3-thumbnail.zip
    Properties:
      IamInstanceProfile: !Ref 'RoleName'
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap
          - AWSInstanceType2Arch
          - !Ref 'InstanceType'
          - Arch
      InstanceType: !Ref 'InstanceType'
      KeyName: !Ref 'KeyName'
      SecurityGroupIds:
        - !Ref 'TestSecurityGroup'
      Tags:
        - Key: Type
          Value: Control
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash -xe
          yum update -y aws-cfn-bootstrap
          # Start cfn-init
          /opt/aws/bin/cfn-init -s ${AWS::StackId} -r CfnAnsibleTestControl --region ${AWS::Region} || error_exit 'Failed to run cfn-init'
          # Start up the cfn-hup daemon to listen for changes to the EC2 instance metadata
          /opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'
          # Install truecall dependencies
          yum groupinstall -y @core @debugging @development @hardware-monitoring @large-systems @performance @postgresql @security-tools @web-server @hardware-monitoring @large-systems @system-admin-tools @system-management @system-management-snmp --setopt=group_package_types=mandatory,default,optional
          yum install -y chrony python-psycopg2 httpd-tools libICE libSM libicu libyaml mailcap python-markupsafe perl-Archive-Zip protobuf libunwind sysfsutils lynx base install htop iftop ncurses-compat-libs postgresql postgresql-server mod_ssl

          # install git, ansible, pandas
          yum -y install git python-pip tree
          amazon-linux-extras install ansible2 -y
          pip install numpy pandas xlrd xlsxwriter
          yum update -y
          cd /opt/ansible
          git init

          # All done so signal success
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource CfnAnsibleTestControl --region ${AWS::Region}
    Type: AWS::EC2::Instance
  CfnAnsibleTestSlave1:
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          buckets:
            - lambda-code-kaiyuan
            - ansible-test-kaiyuan
          roleName: !Ref 'RoleName'
          type: S3
    Properties:
      IamInstanceProfile: !Ref 'RoleName'
      ImageId: !FindInMap
        - AWSRegionArch2AMI
        - !Ref 'AWS::Region'
        - !FindInMap
          - AWSInstanceType2Arch
          - !Ref 'InstanceType'
          - Arch
      InstanceType: !Ref 'InstanceType'
      KeyName: !Ref 'KeyName'
      SecurityGroupIds:
        - !Ref 'TestSecurityGroup'
      Tags:
        - Key: Type
          Value: Slave
    Type: AWS::EC2::Instance
  TestSecurityGroup:
    Properties:
      GroupDescription: Security group for Docker sls Test Servers
      SecurityGroupIngress:
        - CidrIp: '0.0.0.0/0'
          Description: http
          FromPort: '80'
          IpProtocol: tcp
          ToPort: '80'
        - CidrIp: '0.0.0.0/0'
          Description: https
          FromPort: '8443'
          IpProtocol: tcp
          ToPort: '8443'
        - CidrIp: !Ref 'SSHLocation'
          Description: ssh
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '22'
      VpcId: !Ref 'VpcId'
    Type: AWS::EC2::SecurityGroup
  TestSecurityGroupIngress:
    Properties:
      FromPort: '0'
      GroupId: !Ref 'TestSecurityGroup'
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref 'TestSecurityGroup'
      ToPort: '65535'
    Type: AWS::EC2::SecurityGroupIngress
