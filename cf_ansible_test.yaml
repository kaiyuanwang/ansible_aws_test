Description: |
  AWS Cloudformation template for TrueCall ansible test
  1 control, 2 slaves, can extend to more
  Dependecies:
    1. S3 bucket with pem file, packages, applications
    2. IAM role for S3 access
    3. Security group for My IP access only
    4. Building of control server depends on successful built of slave servers
  Functions:
    1. build 1 control server and 2 slave servers with all application dependency packages 
    2. On control, install ansible, git, copy applicaiton packages from private s3 bucket
    3. Use pem file from private s3 bucket for passwordless connections between all servers. change to rsa pair for enhanced security later.
    4. Update contorl /etc/hosts with slave IPs
    5. Need to update security group to allow laptop ip access
    6. Use AWS cfn-init for cloudformation metadata control
    7. Control server building depends on slave servers. Automatically roll back if control built fails.
    8. Output server public IPs in cloudformation IP

AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    Default: MyEC2KeyPair
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  RoleName:
    Description: Name of IAM Role for EC2 instances
    Type: "String"
    Default: "S3-Admin-Access"
    ConstraintDescription: must be the name of an existing IAM Role.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t1.micro, t2.nano, t2.micro, t2.small, t2.medium, t2.large, m1.small,
      m1.medium, m1.large, m1.xlarge, m2.xlarge, m2.2xlarge, m2.4xlarge, m3.medium,
      m3.large, m3.xlarge, m3.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge,
      m4.10xlarge, c1.medium, c1.xlarge, c3.large, c3.xlarge, c3.2xlarge, c3.4xlarge,
      c3.8xlarge, c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, g2.2xlarge,
      g2.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge, r3.8xlarge, i2.xlarge,
      i2.2xlarge, i2.4xlarge, i2.8xlarge, d2.xlarge, d2.2xlarge, d2.4xlarge, d2.8xlarge,
      hi1.4xlarge, hs1.8xlarge, cr1.8xlarge, cc2.8xlarge, cg1.4xlarge]
    ConstraintDescription: must be a valid EC2 instance type.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  #SecurityGroup:
  #  Description: Security group used for ansible test
  #  Type: String
  #  Default: sg-066f4f3e606bef70c
  #  ConstraintDescription: must be existing security group
  AnsiblePackage:
    Description: ansible package name in s3://ansible-test-kaiyuan bucket
    Type: String
    Default: ansible_truecall_v17.3_02Nov18.tar.gz
    ConstraintDescription: must be existing ansible package file
  TrueCallPackage:
    Description: TrueCall package name in s3://ansible-test-kaiyuan bucket
    Type: String
    Default: TrueCall-Server-17.3.0.16-0-gaa28f3b-el7-x86_64.rpm
    ConstraintDescription: must be existing TrueCall package file
  GsrPackage:
    Description: Gsr package name in s3://ansible-test-kaiyuan bucket
    Type: String
    Default: GSRservices-V7.17.3.0.3_PR_CP23-0_el7.x86_64.rpm
    ConstraintDescription: must be existing Gsr package file
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Default: vpc-0fa16d5fa89c52bd9
    Description: VpcId of your existing Virtual Private Cloud (VPC)

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "EC2 Configuration"
        Parameters:
          - SSHLocation
          - VpcId
          - InstanceType
      - Label:
          default: "Connection Configuration"
        Parameters:
          - KeyName
          - RoleName      
      - Label:
          default: "Ansible Configuration"
        Parameters:
          - AnsiblePackage
          - TrueCallPackage
          - GsrPackage

Mappings:
  AWSInstanceType2Arch:
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
  AWSRegionArch2AMI:
    ap-southeast-2:
      HVM64: ami-08589eca6dcc9b39c

Resources:
  AnsibleTestSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Security group for Ansible Test Servers
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: !Ref SSHLocation
          FromPort: '22'
          ToPort: '22'
          Description: ssh
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: '80'
          ToPort: '80'
          Description: http
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: '8443'
          ToPort: '8443'
          Description: https
  SlaveHost1:
    Description: "Ansible Slave host 1"
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      SecurityGroupIds: [!Ref 'AnsibleTestSecurityGroup']
      KeyName: !Ref 'KeyName'
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', !FindInMap [AWSInstanceType2Arch,
          !Ref 'InstanceType', Arch]]
      Tags:
        -
          Key: Type
          Value: Slave
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            # Install Base System Software
            yum groupinstall -y @core @debugging @development @hardware-monitoring @large-systems @performance @postgresql @security-tools @web-server @hardware-monitoring @large-systems @system-admin-tools @system-management @system-management-snmp --setopt=group_package_types=mandatory,default,optional
            yum install -y chrony python-psycopg2 httpd-tools libICE libSM libicu libyaml mailcap python-markupsafe perl-Archive-Zip protobuf libunwind sysfsutils lynx base install htop iftop ncurses-compat-libs postgresql postgresql-server
            yum update -y
            mkdir /var/lib/truecall
            chmod 777 /var/lib/truecall

  SlaveHost2:
    Description: "Ansible Slave host 2"
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      SecurityGroupIds: [!Ref 'AnsibleTestSecurityGroup']
      KeyName: !Ref 'KeyName'
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', !FindInMap [AWSInstanceType2Arch,
          !Ref 'InstanceType', Arch]]
      Tags:
        -
          Key: Type
          Value: Slave
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            # Install Base System Software
            yum groupinstall -y @core @debugging @development @hardware-monitoring @large-systems @performance @postgresql @security-tools @web-server @hardware-monitoring @large-systems @system-admin-tools @system-management @system-management-snmp --setopt=group_package_types=mandatory,default,optional
            yum install -y chrony python-psycopg2 httpd-tools libICE libSM libicu libyaml mailcap python-markupsafe perl-Archive-Zip protobuf libunwind sysfsutils lynx base install htop iftop ncurses-compat-libs postgresql postgresql-server
            yum update -y
            mkdir /var/lib/truecall
            chmod 777 /var/lib/truecall

  ControlHost:
    Description: "Ansible control host"
    Type: AWS::EC2::Instance
    DependsOn:
      - SlaveHost1
      - SlaveHost2
    Properties:
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'RoleName'
      SecurityGroupIds: [!Ref 'AnsibleTestSecurityGroup']
      KeyName: !Ref 'KeyName'
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', !FindInMap [AWSInstanceType2Arch,
          !Ref 'InstanceType', Arch]]
      Tags:
        -
          Key: Type
          Value: Control
      UserData: # to validate
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            # Get the latest CloudFormation package
            yum update -y aws-cfn-bootstrap
            # Start cfn-init
            /opt/aws/bin/cfn-init -s ${AWS::StackId} -r ControlHost --region ${AWS::Region} || error_exit 'Failed to run cfn-init'
            # Start up the cfn-hup daemon to listen for changes to the EC2 instance metadata
            /opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'
            # All done so signal success
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource ControlHost --region ${AWS::Region}

            # Install Base System Software
            yum groupinstall -y @core @debugging @development @hardware-monitoring @large-systems @performance @postgresql @security-tools @web-server @hardware-monitoring @large-systems @system-admin-tools @system-management @system-management-snmp --setopt=group_package_types=mandatory,default,optional
            yum install -y chrony python-psycopg2 httpd-tools libICE libSM libicu libyaml mailcap python-markupsafe perl-Archive-Zip protobuf libunwind sysfsutils lynx base install htop iftop ncurses-compat-libs postgresql postgresql-server mod_ssl
            yum -y install git
            amazon-linux-extras install ansible2 -y
            yum update -y
            cd /opt/ansible
            git init
            mkdir /var/lib/truecall
            chmod 777 /var/lib/truecall
            for f in handset_private.pem handset_public.pem handset_db.txt COMMON_LTE_201811140400_MELBOURNE_new.txt; do
              touch /opt/ansible/roles/tc_install/files/$f
            done
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Metadata:
      Comment: "1. Config passwordless connection to slaves. 2. Fetch packages. 3. Install ansible. 4. Install git. 5. YUM update."
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref RoleName
          buckets: 
            - ansible-test-kaiyuan
      AWS::CloudFormation::Init:
        config:
          sources:
            "/opt": !Join [ '/', [ "https://ansible-test-kaiyuan.s3.amazonaws.com", !Ref AnsiblePackage ]]
            "/opt/ansible": "https://ansible-test-kaiyuan.s3.amazonaws.com/config_ansible_output_aws.zip"
          files:
            "/etc/hosts":
              content: !Sub |
                127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 control
                ::1         localhost6 localhost6.localdomain6
                control
                ${SlaveHost1.PrivateIp} slave_1
                ${SlaveHost2.PrivateIp} slave_2
              mode: "000755"
              owner: "root"
              group: "root"
              #authentication: "S3AccessCreds"
            "/home/ec2-user/.ssh/config":
              content: |
                Host slave_1
                IdentityFile ~/.ssh/MyEC2KeyPair.pem
                Host slave_2
                IdentityFile ~/.ssh/MyEC2KeyPair.pem
                Host control
                IdentityFile ~/.ssh/MyEC2KeyPair.pem
              mode: "000400"
              owner: "ec2-user"
              group: "ec2-user"
            "/home/ec2-user/.ssh/MyEC2KeyPair.pem":
              source: "https://ansible-test-kaiyuan.s3.amazonaws.com/MyEC2KeyPair.pem"
              mode: "000400"
              owner: "ec2-user"
              group: "ec2-user"
            "/opt/ansible/download_packages.sh":
              content: !Sub |
                aws s3 cp s3://ansible-test-kaiyuan/${TrueCallPackage} /opt/ansible/roles/tc_install/files
                aws s3 cp s3://ansible-test-kaiyuan/${GsrPackage} /opt/ansible/roles/tc_install/files
                #sed -i "s?^truecall_rpm:?truecall_rpm: ${TrueCallPackage}?; s?gsrsvcs_rpm:?gsrsvcs_rpm: ${GsrPackage}?g" /opt/ansible/roles/tc_install/vars/main.yml
                ####### TEST FOR test.ini.j2 JINJA2 TEMPLATE
                for f in config.ini_vo{,.logic}.j2; do
                  #aws s3 cp s3://ansible-test-kaiyuan/$f /opt/ansible/roles/tc_install/templates
                  chmod 777 /opt/ansible/roles/tc_install/templates/$f
                done
                mv /opt/ansible/roles/tc_install/tasks/main.yml /opt/ansible/roles/tc_install/tasks/main_org.yml
                aws s3 cp s3://ansible-test-kaiyuan/test_main.yml /opt/ansible/roles/tc_install/tasks/main.yml
                mkdir /opt/ansible/group_vars/all/
                #aws s3 cp s3://ansible-test-kaiyuan/default.yml /opt/ansible/group_vars/all/
                #awk 'NR>1{print}' /opt/ansible/default.yml >> /opt/ansible/group_vars/TrueCall.yml
                #for f in {/opt/ansible/roles/tc_install/tasks/main.yml}; do
                chmod 777 /opt/ansible/roles/tc_install/tasks/main.yml
                #done
              mode: "000755"
              owner: "root"
              group: "root"
            #"/opt/ansible/ansible.cfg":
            #  source: "https://ansible-test-kaiyuan.s3.amazonaws.com/ansible.cfg"
            #  mode: "000755"
            #  owner: "ec2-user"
            #  group: "ec2-user"
            #"/opt/ansible/dev":
            #  source: "https://ansible-test-kaiyuan.s3.amazonaws.com/dev"
            #  mode: "000755"
            #  owner: "ec2-user"
            #  group: "ec2-user"
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ControlHost.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ControlHost --region ${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
          commands:
            config_ansible_connections:
              command: 'sed -i "s/production$/production_test/g" /opt/ansible/ansible.cfg; sed -i "s/^control/control ansible_connection=local/g" /opt/ansible/production_test'
            config_etc_hosts:
              command: 'private_ip=`curl http://169.254.169.254/latest/meta-data/local-ipv4`; sed -i "s/^control$/${private_ip} control/g" /etc/hosts'
            config_ansible_privileges:
              command: |
                chmod 755 -R /opt/ansible
                chown -R ec2-user:ec2-user /opt/ansible
            update_package_vars:
              command: "/opt/ansible/download_packages.sh"
            config_alias: 
              command: |
                echo "alias tcdir='cd /var/lib/truecall/'
                alias tclog='cd /var/lib/truecall/log/'
                alias tcconfig='cd /opt/tc3/etc/'
                alias tcscript='cd /opt/tc3/scripts'" >> ~ec2-user/.bashrc         
Outputs:
  ControlPublicIp:
    Description: Public IP address of the control server
    Value:
      !GetAtt ControlHost.PublicIp
  Slave1PublicIp:
    Description: Public IP address of the slave1 server
    Value:
      !GetAtt SlaveHost1.PublicIp
  Slave2PublicIp:
    Description: Public IP address of the slave1 server
    Value:
      !GetAtt SlaveHost2.PublicIp





